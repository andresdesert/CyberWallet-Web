var e=Object.defineProperty,t=(t,r,s)=>((t,r,s)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[r]=s)(t,"symbol"!=typeof r?r+"":r,s);import{a as r}from"./chunk-BW7e_yWW.js";import{l as s}from"./index-B7Z_1TZN.js";s.setLevel("error");class i{static setRetryConfig(e,t){this.retryConfigs.set(e,t)}static getRetryConfig(e){const t={retries:3,retryDelay:1e3,retryCondition:e=>!e.response||"ECONNABORTED"===e.code||"NETWORK_ERROR"===e.code||e.response.status>=500&&e.response.status<600};for(const[r,s]of this.retryConfigs)if(e.includes(r))return{...t,...s};return t}static calculateDelay(e,t){const r=t*Math.pow(2,e),s=1e3*Math.random();return Math.min(r+s,3e4)}}t(i,"retryConfigs",new Map);class n{static shouldAllowRequest(e){const t=this.getBreaker(e),r=Date.now();switch(t.state){case"CLOSED":default:return!0;case"OPEN":return r-t.lastFailureTime>this.TIMEOUT_WINDOW&&(t.state="HALF_OPEN",t.failures=0,!0);case"HALF_OPEN":return t.failures<this.HALF_OPEN_MAX_CALLS}}static onSuccess(e){const t=this.getBreaker(e);t.failures=0,t.state="CLOSED"}static onFailure(e){const t=this.getBreaker(e);t.failures+=1,t.lastFailureTime=Date.now(),t.failures>=this.FAILURE_THRESHOLD&&(t.state="OPEN",s.warn(`[CIRCUIT_BREAKER] Endpoint ${e} circuit opened due to ${t.failures} failures`))}static getBreaker(e){const t=new URL(e,"http://localhost").pathname;return this.breakers.has(t)||this.breakers.set(t,{failures:0,lastFailureTime:0,state:"CLOSED"}),this.breakers.get(t)}}t(n,"breakers",new Map),t(n,"FAILURE_THRESHOLD",5),t(n,"TIMEOUT_WINDOW",6e4),t(n,"HALF_OPEN_MAX_CALLS",3);const o=class{static getStatus(){return this.isOnline}static addListener(e){return this.listeners.push(e),()=>{this.listeners=this.listeners.filter(t=>t!==e)}}static notifyListeners(e){this.listeners.forEach(t=>{try{t(e)}catch(r){s.error("[NETWORK] Error in network status listener:",r)}})}};t(o,"listeners",[]),t(o,"isOnline",navigator.onLine),window.addEventListener("online",()=>{o.isOnline=!0,o.notifyListeners(!0),s.info("[NETWORK] Connection restored")}),window.addEventListener("offline",()=>{o.isOnline=!1,o.notifyListeners(!1),s.warn("[NETWORK] Connection lost")});let a=o;class u{static addListener(e){return this.listeners.push(e),()=>{this.listeners=this.listeners.filter(t=>t!==e)}}static notify(e,t="error",r=5e3){const i={message:e,type:t,duration:r,timestamp:Date.now()};this.notificationQueue.push(i),this.listeners.forEach(e=>{try{e(i)}catch(t){s.error("[NOTIFICATIONS] Error in notification listener:",t)}})}static getNotificationQueue(){return[...this.notificationQueue]}static clearQueue(){this.notificationQueue=[]}}t(u,"notificationQueue",[]),t(u,"listeners",[]);const c=r.create({baseURL:"/api/v1",timeout:15e3,headers:{"Content-Type":"application/json",Accept:"application/json"},withCredentials:!1});c.interceptors.request.use(e=>{if(!n.shouldAllowRequest(e.url||"")){const e=new Error("Circuit breaker is OPEN for this endpoint");return e.isCircuitBreakerError=!0,Promise.reject(e)}if(!a.getStatus())return s.warn("[NETWORK] Request blocked: offline"),u.notify("Sin conexión a internet","warning"),Promise.reject(new Error("No internet connection"));let t=localStorage.getItem("token");if(!t){const e=localStorage.getItem("user");if(e)try{t=JSON.parse(e).token}catch(r){s.warn("[AUTH] Invalid user object in localStorage")}}return t&&e.headers&&(e.headers.Authorization=`Bearer ${t}`),e},e=>(s.error(`[REQUEST_ERROR] ${e.message}`),Promise.reject(e))),c.interceptors.response.use(e=>(n.onSuccess(e.config.url||""),e),async e=>{const t=(e=>{const{response:t,request:r,message:s,code:i}=e,n=t?.data;return{url:e.config?.url,method:e.config?.method?.toUpperCase(),status:t?.status,message:n?.message||n?.detail||s,code:i,detail:n?.detail,isNetworkError:!t&&!!r,isTimeout:"ECONNABORTED"===i,isRetryable:!t||t.status>=500&&t.status<600||"ECONNABORTED"===i}})(e),r=(e=>{const{status:t,isNetworkError:r,isTimeout:s}=e;if(r)return"Sin conexión a internet. Verifica tu conexión y vuelve a intentar.";if(s)return"La solicitud tardó demasiado. Vuelve a intentar en unos momentos.";switch(t){case 400:return"Los datos enviados no son válidos. Revisa la información e inténtalo de nuevo.";case 401:return"Tu sesión ha expirado. Por favor, inicia sesión nuevamente.";case 403:return"No tienes permisos para realizar esta acción.";case 404:return"El recurso solicitado no fue encontrado.";case 409:return"Conflicto con el estado actual. Es posible que los datos hayan cambiado.";case 422:return"Los datos enviados contienen errores de validación.";case 429:return"Demasiadas solicitudes. Espera un momento antes de intentar nuevamente.";case 500:return"Error interno del servidor. Nuestro equipo ha sido notificado.";case 502:case 503:case 504:return"El servicio no está disponible temporalmente. Inténtalo más tarde.";default:return"Ocurrió un error inesperado. Vuelve a intentar en unos momentos."}})(t);if(e.config?.url&&n.onFailure(e.config.url),401===t.status){const e=window.location.pathname;e.includes("/login")||e.includes("/register")||(localStorage.removeItem("token"),localStorage.removeItem("user"),u.notify("Tu sesión ha expirado. Serás redirigido al login.","warning"),setTimeout(()=>{window.location.href="/login"},2e3))}else 429===t.status?u.notify("Demasiadas solicitudes. Espera un momento.","warning",8e3):t.isNetworkError||t.isTimeout?u.notify(r,"error",6e3):t.status&&t.status>=500?u.notify("Error del servidor. Inténtalo más tarde.","error"):t.status&&t.status>=400&&u.notify(r,"warning");try{return await(async e=>{const t=e.config;if(!t)return Promise.reject(e);const r=i.getRetryConfig(t.url||""),n=t._retryCount||0;if(n>=r.retries||!r.retryCondition?.(e))return Promise.reject(e);t._retryCount=n+1;const o=i.calculateDelay(n,r.retryDelay);return s.warn(`[RETRY] Attempting retry ${t._retryCount}/${r.retries} for ${t.method?.toUpperCase()} ${t.url} after ${o}ms`),await new Promise(e=>setTimeout(e,o)),c(t)})(e)}catch(o){return s.error("[API_ERROR]",{url:t.url,method:t.method,status:t.status,message:t.message}),Promise.reject(e)}}),i.setRetryConfig("/auth",{retries:2,retryDelay:500}),i.setRetryConfig("/wallet",{retries:3,retryDelay:1e3}),i.setRetryConfig("/transactions",{retries:3,retryDelay:2e3});export{c as a};
